// ===== DEBUG PARA ABA EXCEL =====

class ExcelDebug {
  constructor() {
    this.init();
  }

  init() {
    console.log('üîç Debug da Aba Excel iniciado');
    console.log('üìã Comandos dispon√≠veis:');
    console.log('   window.excelDebug.diagnose() - Diagn√≥stico detalhado');
    console.log('   window.excelDebug.checkElements() - Verificar elementos');
    console.log('   window.excelDebug.checkData() - Verificar dados');
    console.log('   window.excelDebug.testAPI() - Testar API');
    console.log('   window.excelDebug.fixErrors() - Corrigir erros comuns');
    console.log('   window.excelDebug.diagnoseAPI() - DEBUG MASSIVO DA API');
    console.log('   window.excelDebug.testAPIData() - Teste completo da API');
    console.log('   window.excelDebug.quickTest() - Teste r√°pido completo');
    console.log('   window.excelDebug.debugMassivo() - DEBUG MASSIVO COMPLETO');
  }

  checkElements() {
    console.log('üîç Verificando elementos da aba Excel...');
    
    const elements = {
      'load-folder-btn': document.getElementById('load-folder-btn'),
      'excel-stats-grid': document.getElementById('excel-stats-grid'),
      'excel-chart-container': document.getElementById('excel-chart-container'),
      'excel-chart': document.getElementById('excel-chart'),
      'total-files': document.getElementById('total-files'),
      'total-employees': document.getElementById('total-employees'),
      'total-records': document.getElementById('total-records'),
      'total-points': document.getElementById('total-points'),
      'avg-points': document.getElementById('avg-points')
    };

    console.log('üìä Status dos elementos:');
    Object.entries(elements).forEach(([id, element]) => {
      const status = element ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado';
      console.log(`   ${id}: ${status}`);
    });

    // Verificar cards de estat√≠sticas
    const statCards = document.querySelectorAll('.excel-stat-card');
    console.log(`üìã Cards de estat√≠sticas: ${statCards.length} encontrados`);

    // Verificar se o ExcelDashboard est√° carregado
    if (window.ExcelDashboard) {
      console.log('‚úÖ ExcelDashboard carregado');
      console.log('üìä Estado atual:', window.ExcelDashboard.state);
    } else {
      console.log('‚ùå ExcelDashboard n√£o encontrado');
    }
  }

  checkData() {
    console.log('üîç Verificando dados da aba Excel...');
    
    if (window.ExcelDashboard && window.ExcelDashboard.state.data) {
      const data = window.ExcelDashboard.state.data;
      console.log('üìä Dados carregados:', data);
      
      if (data.employees) {
        console.log(`üë• Funcion√°rios: ${Object.keys(data.employees).length}`);
        Object.entries(data.employees).forEach(([name, empData]) => {
          // ‚úÖ CORRE√á√ÉO: Usar as chaves corretas do backend (com underscore)
          console.log(`   ${name}: ${empData.total_points || empData.totalPoints || 0} pontos, ${empData.total_records || empData.totalRecords || 0} registros`);
        });
      }
    } else {
      console.log('‚ùå Nenhum dado carregado');
    }
  }

  async testAPI() {
    console.log('üß™ Testando API da aba Excel...');
    
    try {
      // Testar endpoint de status
      const statusResponse = await fetch('/api/excel/status');
      const statusData = await statusResponse.json();
      console.log('üìä Status da API:', statusData);
      
      // Testar endpoint de carregar pasta
      const loadResponse = await fetch('/api/excel/load_folder', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          folder_path: 'registros monitorar'
        })
      });
      
      const loadData = await loadResponse.json();
      console.log('üìä Resposta do carregamento:', loadData);
      
    } catch (error) {
      console.error('‚ùå Erro ao testar API:', error);
    }
  }

  fixErrors() {
    console.log('üîß Corrigindo erros comuns da aba Excel...');
    
    // Corrigir valores undefined nos cards
    const statElements = [
      'total-files',
      'total-employees', 
      'total-records',
      'total-points',
      'avg-points'
    ];
    
    statElements.forEach(id => {
      const element = document.getElementById(id);
      if (element && (element.textContent === 'undefined' || element.textContent === '')) {
        element.textContent = '0';
        console.log(`‚úÖ Corrigido elemento ${id}`);
      }
    });
    
    // Corrigir detalhes dos cards
    const detailElements = [
      'files-detail',
      'employees-detail',
      'records-detail', 
      'points-detail',
      'avg-detail'
    ];
    
    detailElements.forEach(id => {
      const element = document.getElementById(id);
      if (element && (element.textContent === 'undefined' || element.textContent === '')) {
        element.textContent = 'Dados n√£o dispon√≠veis';
        console.log(`‚úÖ Corrigido detalhe ${id}`);
      }
    });
    
    // Verificar se o ExcelDashboard est√° inicializado
    if (!window.ExcelDashboard) {
      console.log('‚ö†Ô∏è ExcelDashboard n√£o encontrado, tentando inicializar...');
      // Tentar inicializar manualmente
      if (typeof window.ExcelDashboard !== 'undefined') {
        window.ExcelDashboard.init();
        console.log('‚úÖ ExcelDashboard inicializado manualmente');
      }
    }
    
    console.log('‚úÖ Corre√ß√µes aplicadas!');
  }

  // M√©todo para diagn√≥stico detalhado
  diagnose() {
    console.log('üîç === DIAGN√ìSTICO DETALHADO ABA EXCEL ===');
    
    // 1. Verificar se estamos na aba Excel
    const excelTab = document.getElementById('excel-tab');
    const isExcelActive = excelTab && excelTab.classList.contains('active');
    console.log(`üìç Aba Excel ativa: ${isExcelActive ? '‚úÖ Sim' : '‚ùå N√£o'}`);
    
    // 2. Verificar elementos cr√≠ticos
    const criticalElements = {
      'excel-tab': document.getElementById('excel-tab'),
      'load-folder-btn': document.getElementById('load-folder-btn'),
      'excel-stats-grid': document.getElementById('excel-stats-grid'),
      'excel-chart-container': document.getElementById('excel-chart-container'),
      'excel-chart': document.getElementById('excel-chart')
    };
    
    console.log('üìã Elementos cr√≠ticos:');
    Object.entries(criticalElements).forEach(([id, element]) => {
      const status = element ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado';
      console.log(`   ${id}: ${status}`);
    });
    
    // 3. Verificar ExcelDashboard
    if (window.ExcelDashboard) {
      console.log('‚úÖ ExcelDashboard carregado');
      console.log('üìä Estado:', window.ExcelDashboard.state);
    } else {
      console.log('‚ùå ExcelDashboard N√ÉO encontrado');
    }
    
    // 4. Verificar Chart.js
    this.diagnoseChartJS();
    
    // 5. Verificar API
    this.diagnoseAPI();
    
    // 6. Verificar se os scripts est√£o carregados
    const scripts = [
      'excel_dashboard.js',
      'excel-debug.js',
      'excel-performance-test.js'
    ];
    
    console.log('üìú Scripts carregados:');
    scripts.forEach(script => {
      const found = Array.from(document.scripts).some(s => s.src.includes(script));
      console.log(`   ${script}: ${found ? '‚úÖ Sim' : '‚ùå N√£o'}`);
    });
    
    // 7. For√ßar inicializa√ß√£o se necess√°rio
    if (!window.ExcelDashboard) {
      console.log('üîÑ Tentando inicializar ExcelDashboard...');
      // Recarregar o script se necess√°rio
      const script = document.createElement('script');
      script.src = '/static/js/excel_dashboard.js';
      script.onload = () => {
        console.log('‚úÖ ExcelDashboard recarregado');
        if (window.ExcelDashboard) {
          window.ExcelDashboard.init();
        }
      };
      document.head.appendChild(script);
    }
    
    console.log('==========================================');
  }

  // Diagn√≥stico espec√≠fico do Chart.js
  diagnoseChartJS() {
    console.log('üìä === DIAGN√ìSTICO CHART.JS ===');
    
    // Verificar se Chart.js est√° carregado
    if (typeof Chart !== 'undefined') {
      console.log('‚úÖ Chart.js carregado');
      console.log('üìä Vers√£o:', Chart.version);
      console.log('üìä Configura√ß√µes globais:', {
        animation: Chart.defaults?.animation,
        responsiveAnimationDuration: Chart.defaults?.responsiveAnimationDuration
      });
    } else {
      console.log('‚ùå Chart.js N√ÉO encontrado');
    }
    
    // Verificar plugins
    if (window.chartjsPluginAnnotation) {
      console.log('‚úÖ Plugin de annotation encontrado');
    } else {
      console.log('‚ùå Plugin de annotation N√ÉO encontrado');
    }
    
    // Verificar se h√° m√∫ltiplas inst√¢ncias
    const chartScripts = Array.from(document.scripts).filter(s => 
      s.src && s.src.includes('chart.js')
    );
    console.log(`üìä Scripts Chart.js encontrados: ${chartScripts.length}`);
    chartScripts.forEach((script, index) => {
      console.log(`   ${index + 1}: ${script.src}`);
    });
    
    // Verificar canvas
    const canvas = document.getElementById('excel-chart');
    if (canvas) {
      console.log('‚úÖ Canvas encontrado');
      console.log('üìä Dimens√µes:', canvas.width, 'x', canvas.height);
      console.log('üìä Contexto:', canvas.getContext('2d') ? '‚úÖ Dispon√≠vel' : '‚ùå Indispon√≠vel');
    } else {
      console.log('‚ùå Canvas n√£o encontrado');
    }
    
    console.log('================================');
  }

  // M√©todo para teste r√°pido completo
  async quickTest() {
    console.log('üöÄ Iniciando teste r√°pido da aba Excel...');
    
    // 1. Verificar elementos
    console.log('\n1Ô∏è‚É£ Verificando elementos...');
    this.checkElements();
    
    // 2. Corrigir erros
    console.log('\n2Ô∏è‚É£ Corrigindo erros...');
    this.fixErrors();
    
    // 3. Testar Chart.js
    console.log('\n3Ô∏è‚É£ Testando Chart.js...');
    this.testChartJS();
    
    // 4. Testar API
    console.log('\n4Ô∏è‚É£ Testando API...');
    await this.testAPIData();
    
    // 5. Verificar dados
    console.log('\n5Ô∏è‚É£ Verificando dados...');
    setTimeout(() => {
      this.checkData();
      console.log('\n‚úÖ Teste r√°pido conclu√≠do!');
    }, 1000);
  }

  // Teste espec√≠fico do Chart.js
  testChartJS() {
    console.log('üß™ Testando Chart.js...');
    
    // 1. Verificar se Chart.js est√° dispon√≠vel
    if (typeof Chart === 'undefined') {
      console.log('‚ùå Chart.js n√£o est√° dispon√≠vel');
      return;
    }
    
    // 2. Testar cria√ß√£o de um gr√°fico simples
    try {
      const testCanvas = document.createElement('canvas');
      testCanvas.width = 100;
      testCanvas.height = 100;
      document.body.appendChild(testCanvas);
      
      const testChart = new Chart(testCanvas, {
        type: 'line',
        data: {
          labels: ['Teste'],
          datasets: [{
            label: 'Teste',
            data: [1],
            borderColor: '#3b82f6'
          }]
        },
        options: {
          animation: { duration: 0 },
          responsive: false,
          maintainAspectRatio: false
        }
      });
      
      // Verificar se o gr√°fico foi criado sem erros
      if (testChart && testChart.data) {
        console.log('‚úÖ Chart.js funcionando corretamente');
        testChart.destroy();
        document.body.removeChild(testCanvas);
      } else {
        console.log('‚ùå Chart.js n√£o criou gr√°fico corretamente');
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao testar Chart.js:', error);
      console.error('‚ùå Stack trace:', error.stack);
    }
  }

  // Diagn√≥stico espec√≠fico dos dados da API
  async diagnoseAPI() {
    console.log('üîç === DIAGN√ìSTICO MASSIVO DA API ===');
    
    try {
      // 1. Testar endpoint de registros com DEBUG MASSIVO
      console.log('üìä Testando endpoint /api/entries...');
      const entriesResponse = await fetch('/api/entries');
      console.log('üìä Status da resposta:', entriesResponse.status);
      console.log('üìä Headers da resposta:', entriesResponse.headers);
      
      const entriesData = await entriesResponse.json();
      console.log('üìä Dados brutos da API:', entriesData);
      
      if (entriesData.entries && entriesData.entries.length > 0) {
        console.log(`üìä Total de registros: ${entriesData.entries.length}`);
        
        // DEBUG MASSIVO: Verificar cada registro individualmente
        entriesData.entries.forEach((entry, index) => {
          console.log(`\nüîç REGISTRO ${index + 1}:`);
          console.log('   ID:', entry.id);
          console.log('   Employee Name:', entry.employee_name);
          console.log('   Employee Name Type:', typeof entry.employee_name);
          console.log('   Employee Name === undefined:', entry.employee_name === undefined);
          console.log('   Employee Name === null:', entry.employee_name === null);
          console.log('   Employee Name === "":', entry.employee_name === "");
          console.log('   Date:', entry.date);
          console.log('   Refinery:', entry.refinery);
          console.log('   Points:', entry.points);
          console.log('   Observations:', entry.observations);
          
          // Verificar se √© undefined
          if (entry.employee_name === undefined) {
            console.log('‚ùå PROBLEMA: employee_name √© undefined!');
          } else if (entry.employee_name === null) {
            console.log('‚ùå PROBLEMA: employee_name √© null!');
          } else if (entry.employee_name === "") {
            console.log('‚ùå PROBLEMA: employee_name √© string vazia!');
          } else {
            console.log('‚úÖ employee_name parece v√°lido');
          }
        });
        
        // Verificar se employee_name est√° undefined
        const undefinedEmployees = entriesData.entries.filter(entry => 
          entry.employee_name === undefined || entry.employee_name === null
        );
        
        console.log(`\nüìä RESUMO: Registros com employee undefined: ${undefinedEmployees.length}/${entriesData.entries.length}`);
        
        if (undefinedEmployees.length > 0) {
          console.log('‚ùå PROBLEMA ENCONTRADO: employee_name est√° undefined');
          console.log('üìä Exemplo de registro problem√°tico:', undefinedEmployees[0]);
        } else {
          console.log('‚úÖ Todos os registros t√™m employee_name v√°lido');
        }
      } else {
        console.log('‚ö†Ô∏è Nenhum registro encontrado na API');
      }
      
      // 2. Testar endpoint de funcion√°rios com DEBUG MASSIVO
      console.log('\nüë• Testando endpoint /api/employees...');
      const employeesResponse = await fetch('/api/employees');
      console.log('üë• Status da resposta employees:', employeesResponse.status);
      
      const employeesData = await employeesResponse.json();
      console.log('üë• Dados brutos dos funcion√°rios:', employeesData);
      
      // 3. Verificar se h√° funcion√°rios v√°lidos
      if (employeesData.employees && employeesData.employees.length > 0) {
        console.log('‚úÖ Funcion√°rios encontrados:', employeesData.employees.length);
        employeesData.employees.forEach((emp, index) => {
          console.log(`\nüë§ FUNCION√ÅRIO ${index + 1}:`);
          console.log('   ID:', emp.id);
          console.log('   Name:', emp.name);
          console.log('   Real Name:', emp.real_name);
          console.log('   Username:', emp.username);
          console.log('   Role:', emp.role);
          console.log('   Weekly Points:', emp.weekly_points);
          console.log('   Weekly Goal:', emp.weekly_goal);
        });
      } else {
        console.log('‚ùå Nenhum funcion√°rio encontrado');
      }
      
      // 4. DEBUG MASSIVO: Testar rela√ß√£o Entry-Employee
      console.log('\nüîç TESTANDO RELA√á√ÉO ENTRY-EMPLOYEE...');
      await this.testEntryEmployeeRelation();
      
    } catch (error) {
      console.error('‚ùå Erro ao diagnosticar API:', error);
      console.error('‚ùå Stack trace:', error.stack);
    }
    
    console.log('================================');
  }

  // Teste espec√≠fico da rela√ß√£o Entry-Employee
  async testEntryEmployeeRelation() {
    console.log('üß™ Testando rela√ß√£o Entry-Employee...');
    
    try {
      // Testar diferentes queries
      const queries = [
        '/api/entries?per_page=1',
        '/api/entries?per_page=5',
        '/api/entries?per_page=10'
      ];
      
      for (const query of queries) {
        console.log(`\nüìä Testando query: ${query}`);
        
        const response = await fetch(query);
        const data = await response.json();
        
        if (data.entries && data.entries.length > 0) {
          console.log(`üìä Query ${query} retornou ${data.entries.length} registros`);
          
          data.entries.forEach((entry, index) => {
            console.log(`   Registro ${index + 1}:`);
            console.log(`     ID: ${entry.id}`);
            console.log(`     Employee Name: "${entry.employee_name}"`);
            console.log(`     Employee Name Type: ${typeof entry.employee_name}`);
            console.log(`     Employee Name Length: ${entry.employee_name ? entry.employee_name.length : 'N/A'}`);
          });
        } else {
          console.log(`‚ö†Ô∏è Query ${query} n√£o retornou registros`);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao testar rela√ß√£o Entry-Employee:', error);
    }
  }

  // Teste espec√≠fico para verificar dados da API
  async testAPIData() {
    console.log('üß™ Testando dados da API...');
    
    try {
      // Testar diferentes endpoints
      const endpoints = [
        '/api/entries',
        '/api/employees',
        '/api/weekly_data',
        '/api/monthly_data',
        '/api/daily_data'
      ];
      
      for (const endpoint of endpoints) {
        console.log(`\nüìä Testando ${endpoint}...`);
        
        try {
          const response = await fetch(endpoint);
          const data = await response.json();
          
          if (response.ok) {
            console.log(`‚úÖ ${endpoint} - OK`);
            console.log(`üìä Dados:`, data);
          } else {
            console.log(`‚ùå ${endpoint} - Erro: ${response.status}`);
          }
        } catch (error) {
          console.log(`‚ùå ${endpoint} - Erro: ${error.message}`);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao testar API:', error);
    }
  }

  // DEBUG MASSIVO COMPLETO
  async debugMassivo() {
    console.log('üöÄ === DEBUG MASSIVO COMPLETO ===');
    console.log('üîç Iniciando an√°lise completa do sistema...');
    
    // 1. Verificar elementos
    console.log('\n1Ô∏è‚É£ Verificando elementos...');
    this.checkElements();
    
    // 2. Verificar Chart.js
    console.log('\n2Ô∏è‚É£ Verificando Chart.js...');
    this.diagnoseChartJS();
    
    // 3. DEBUG MASSIVO DA API
    console.log('\n3Ô∏è‚É£ DEBUG MASSIVO DA API...');
    await this.diagnoseAPI();
    
    // 4. Teste completo da API
    console.log('\n4Ô∏è‚É£ Teste completo da API...');
    await this.testAPIData();
    
    // 5. Verificar dados
    console.log('\n5Ô∏è‚É£ Verificando dados...');
    this.checkData();
    
    // 6. Corrigir erros
    console.log('\n6Ô∏è‚É£ Corrigindo erros...');
    this.fixErrors();
    
    console.log('\n‚úÖ DEBUG MASSIVO COMPLETO FINALIZADO!');
    console.log('üìä Verifique os logs acima para identificar problemas');
  }
}

// Inicializar debug
window.excelDebug = new ExcelDebug();

// ===== FIM DO DEBUG PARA ABA EXCEL ===== 